version: '3.8'
services:
    redis:
        image: redis:latest
        volumes:
          - redis-data:/data
        ports:
          - "6379:6379"
    redisconfig:
        image: redis:latest
        depends_on:
            - redis
        restart: "no"
        entrypoint: ["bash", "-c", "sleep 10 && redis-cli config set notify-keyspace-events Ex"]
        network_mode: host
    kafka:
        image: docker.io/bitnami/kafka:3.6.1
        ports:
            - '9092:9092'
            - '19092:19092'
        container_name: kafka
        environment:
            - KAFKA_KRAFT_CLUSTER_ID=r4zt_wrqTRuT7W2NJsB_GA
            - KAFKA_BROKER_ID=1
            - KAFKA_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093,PLAINTEXT_HOST://:19092
            - KAFKA_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
            - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:19092
            - KAFKA_CFG_PROCESS_ROLES=broker,controller
            - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
            - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka:9093
            - KAFKA_CFG_NODE_ID=1
            - ALLOW_PLAINTEXT_LISTENER=yes
            - KAFKA_NUM_PARTITIONS=4
            - KAFKA_MESSAGE_MAX_BYTES=10485880
    kafkadrop:
        image: obsidiandynamics/kafdrop:latest
        ports:
            - "9000:9000"
        depends_on:
            - kafka
        environment:
            - KAFKA_BROKERCONNECT=kafka:9092
            - JVM_OPTS=-Xms32M -Xmx64M
            - SERVER_SERVLET_CONTEXTPATH=/
    mongodb:
        image: mongo:7.0
        command: [ "--replSet", "rs0", "--bind_ip_all", "--port", "27017" ]
        ports:
            - 27017:27017
        healthcheck:
            test: echo "try { rs.status() } catch (err) { rs.initiate({_id:'rs0',members:[{_id:0,host:'mongodb:27017'}]}) }" | mongosh --port 27017 --quiet
            interval: 5s
            timeout: 30s
            retries: 30
    nginx:
        build:
            context: .
            dockerfile: ./nginx/Dockerfile
        ports:
            - "8080:8080"
        depends_on:
             - orchestrator

    orchestrator:
        image: ${PCF_PROVISIONING_ORCHESTRATOR_IMAGE}
        hostname: pcf-provisioning-orchestrator
        environment:
            EXAGON_ENVELOPE_CONTROL_CACHE_TIMEOUT_MS: ${EXAGON_ENVELOPE_CONTROL_CACHE_TIMEOUT_MS}
            EXAGON_ORCHESTRATOR_SAGA_TIMEOUT: ${EXAGON_ORCHESTRATOR_SAGA_TIMEOUT}
            KAFKA_BOOTSTRAP_SERVERS: ${KAFKA_BOOTSTRAP_SERVERS}
            KAFKA_AUTO_OFFSET_RESET: ${KAFKA_AUTO_OFFSET_RESET}
            KAFKA_SESSION_TIMEOUT_MS: ${KAFKA_SESSION_TIMEOUT_MS}
            EXAGON_HTTP_SERVER_PORT: ${EXAGON_HTTP_SERVER_PORT}
            EXAGON_NFR_MANAGER_HEARTBEAT_MS: ${EXAGON_NFR_MANAGER_HEARTBEAT_MS}
            EXAGON_REDIS_CHANNEL: ${EXAGON_REDIS_CHANNEL}
            EXAGON_REDIS_SERVERS: ${EXAGON_REDIS_SERVERS}
            EXAGON_REDIS_PORT: ${EXAGON_REDIS_PORT}
            EXAGON_REDIS_TTL: ${EXAGON_REDIS_TTL}
        ports:
            - "${EXAGON_HTTP_SERVER_PORT}"
        healthcheck:
            test: [ "CMD", "touch", "/tmp/ready" ]
            interval: 60s
            retries: 5
            start_period: 10s
            timeout: 10s
        depends_on:
            - kafkadrop

    participant:
        image: ${PCF_PROVISIONING_PARTICIPANT_IMAGE}
        hostname: pcf-provisioning-participant
        environment:
            EXAGON_ENVELOPE_CONTROL_CACHE_TIMEOUT_MS: ${EXAGON_ENVELOPE_CONTROL_CACHE_TIMEOUT_MS}
            KAFKA_BOOTSTRAP_SERVERS: ${KAFKA_BOOTSTRAP_SERVERS}
            KAFKA_AUTO_OFFSET_RESET: ${KAFKA_AUTO_OFFSET_RESET}
            KAFKA_SESSION_TIMEOUT_MS: ${KAFKA_SESSION_TIMEOUT_MS}
            MONGODB_URI: ${MONGODB_URI}
            EXAGON_NFR_MANAGER_HEARTBEAT_MS: ${EXAGON_NFR_MANAGER_HEARTBEAT_MS}
            EXAGON_REDIS_CHANNEL: ${EXAGON_REDIS_CHANNEL}
            EXAGON_REDIS_SERVERS: ${EXAGON_REDIS_SERVERS}
            EXAGON_REDIS_PORT: ${EXAGON_REDIS_PORT}
            EXAGON_REDIS_TTL: ${EXAGON_REDIS_TTL}
        healthcheck:
            test: [ "CMD", "touch", "/tmp/ready" ]
            interval: 60s
            retries: 5
            start_period: 10s
            timeout: 10s
        depends_on:
            - kafkadrop
        restart: unless-stopped
    mock-participants:
        image: kafka-mock-participants
        container_name: mock-participant
        hostname: mock-participant
        environment:
            KAFKA_BOOTSTRAP_SERVERS: ${KAFKA_BOOTSTRAP_SERVERS}
            KAFKA_AUTO_OFFSET_RESET: ${KAFKA_AUTO_OFFSET_RESET}
            KAFKA_SESSION_TIMEOUT_MS: ${KAFKA_SESSION_TIMEOUT_MS}
        depends_on:
            - kafkadrop
        restart: unless-stopped

volumes:
    mongodb:
    mongodb2:
    redis-data:

networks:
    -docker_default:
        driver: bridge